let restaurants;var map;var markers=[];const restaurantApi='http://localhost:1337/restaurants';/**
 * Fetch neighborhoods and cuisines as soon as the page is loaded.
 */document.addEventListener('DOMContentLoaded',event=>{fetchCusineAndNeighborhood();fetchRestaurants();});/**
 * Fetch all neighborhoods and set their HTML.
 */fetchCusineAndNeighborhood=()=>{fetch(restaurantApi).then(function(response){return response.json();}).then(function(myJson){console.log(myJson);fillNeighborhoodsHTML(myJson);fillCuisinesHTML(myJson);lazyLoad();openDb(myJson);});};/**
 * Fetch all neighborhoods and set their HTML.
 */fetchRestaurants=(cuisine,neighborhood)=>{fetch(restaurantApi).then(function(response){return response.json();}).then(function(myJson){let restaurants=myJson;if(cuisine!='all'){// filter by cuisine
restaurants=restaurants.filter(r=>r.cuisine_type==cuisine);}if(neighborhood!='all'){// filter by neighborhood
restaurants=restaurants.filter(r=>r.neighborhood==neighborhood);}fillRestaurantsHTML(restaurants);});};/**
 * Set neighborhoods HTML.
 */fillNeighborhoodsHTML=(neighborhoods=self.neighborhoods)=>{const select=document.getElementById('neighborhoods-select');let neighborhoodSet=new Set();for(let neighborhood in neighborhoods){var obj=neighborhoods[neighborhood].neighborhood;neighborhoodSet.add(obj);}neighborhoodSet.forEach(neighborhood=>{const option=document.createElement('option');option.innerHTML=neighborhood;option.value=neighborhood;select.append(option);});};/**
 * Set cuisines HTML.
 */fillCuisinesHTML=(cuisines=self.cuisines)=>{const select=document.getElementById('cuisines-select');let cusineSet=new Set();for(let cuisine in cuisines){var obj=cuisines[cuisine].cuisine_type;cusineSet.add(obj);}cusineSet.forEach(cuisine=>{const option=document.createElement('option');option.innerHTML=cuisine;option.value=cuisine;select.append(option);});};/**
 * Initialize Google map, called from HTML.
 */window.initMap=()=>{let loc={lat:40.722216,lng:-73.987501};self.map=new google.maps.Map(document.getElementById('map'),{zoom:12,center:loc,scrollwheel:false});updateRestaurants();};/**
 * Update page and map for current restaurants.
 */updateRestaurants=()=>{const cSelect=document.getElementById('cuisines-select');const nSelect=document.getElementById('neighborhoods-select');const cIndex=cSelect.selectedIndex;const nIndex=nSelect.selectedIndex;const cuisine=cSelect[cIndex].value;const neighborhood=nSelect[nIndex].value;resetRestaurants(restaurants);fetchRestaurants(cuisine,neighborhood);};/**
 * Clear current restaurants, their HTML and remove their map markers.
 */resetRestaurants=restaurants=>{// Remove all restaurants
self.restaurants=[];const ul=document.getElementById('restaurants-list');const noResults=document.getElementById('no-results');ul.innerHTML='';if(noResults){ul.parentNode.removeChild(noResults);}// Remove all map markers
self.markers.forEach(m=>m.setMap(null));self.markers=[];self.restaurants=restaurants;};/**
 * Create all restaurants HTML and add them to the webpage.
 */fillRestaurantsHTML=(restaurants=self.restaurants)=>{const ul=document.getElementById('restaurants-list');for(let restaurant in restaurants){var obj=restaurants[restaurant];ul.append(createRestaurantHTML(obj));}if(restaurants.length===0){const p=document.createElement('p');p.setAttribute('id','no-results');const parent=ul.parentNode;p.innerHTML="Sorry! There are no results for that combination.";parent.insertBefore(p,ul);}addMarkersToMap(restaurants);};/**
 * Create restaurant HTML.
 */createRestaurantHTML=restaurant=>{const li=document.createElement('li');const image=document.createElement('img');image.className='restaurant-img';image.setAttribute('alt','Picture of '+restaurant.name);image.setAttribute('data-src','/img/min/'+restaurant.photograph+'.webp');li.append(image);const content=document.createElement('div');content.setAttribute('class','restaurant-summary');const name=document.createElement('h3');name.innerHTML=restaurant.name;content.append(name);const neighborhood=document.createElement('p');neighborhood.innerHTML=restaurant.neighborhood;content.append(neighborhood);const address=document.createElement('p');address.innerHTML=restaurant.address;content.append(address);const more=document.createElement('a');const moreText=`View Details <span class="visually-hidden">about ${restaurant.name}</span>`;more.innerHTML=moreText;more.href=DBHelper.urlForRestaurant(restaurant);content.append(more);li.append(content);return li;};/**
 * Add markers for current restaurants to the map.
 */addMarkersToMap=(restaurants=self.restaurants)=>{restaurants.forEach(restaurant=>{// Add marker to the map
const marker=DBHelper.mapMarkerForRestaurant(restaurant,self.map);google.maps.event.addListener(marker,'click',()=>{window.location.href=marker.url;});self.markers.push(marker);});};function elementInViewport(el){var rect=el.getBoundingClientRect();return rect.top>=0&&rect.left>=0&&rect.top<=(window.innerHeight+50||document.documentElement.clientHeight+600);}const lazyLoad=function(){const lazyImages=Array.from(document.querySelectorAll('.restaurant-img'));if(lazyImages){lazyImages.forEach(image=>{if(elementInViewport(image)){const src=image.getAttribute('data-src');const tagName=image.tagName;if(tagName==='IMG'){image.src=src;}}});}};window.addEventListener('scroll',function(){lazyLoad();});/* Create indexdb */openDb=(restaurants=self.restaurants)=>{// This works on all devices/browsers, and uses IndexedDBShim as a final fallback
var indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB;// Open (or create) the database
var open=indexedDB.open("Restaurants",1);// Create the schema
open.onupgradeneeded=function(){console.log('updating/adding DB');var db=open.result;var store=db.createObjectStore("RestaurantStore",{keyPath:"id"});var index=store.createIndex("NameIndex","name");// Add some data
restaurants.forEach(function(restaurant){store.add(restaurant);});};open.onsuccess=function(){// Start a new transaction
var db=open.result;var tx=db.transaction("RestaurantStore","readwrite");var store=tx.objectStore("RestaurantStore");var index=store.index("NameIndex");var count=store.count();console.log('fullstore',store);store.oncomplete=function(){console.log('fullstorecount',count.result);if(count.result>0){for(r=0;r<count.result;r++){restaurants.push(store.get(r));}console.log('count greater than 0',restaurants);}};// Query the data
//var getStore = store.get();
//getStore.onsuccess = function() {
//console.log(getStore);  // => "John"
//};
// Close the db when the transaction is done
tx.oncomplete=function(){db.close();};};};