if('serviceWorker'in navigator){window.addEventListener('load',function(){navigator.serviceWorker.register('service-worker.js').then(function(registration){console.log('ServiceWorker registration successful with scope: ',registration.scope)},function(err){console.log('ServiceWorker registration failed: ',err)})})}
class DBHelper{static get DATABASE_URL(){const port=1337;return`http://localhost:${port}/restaurants`}static fetchRestaurants(callback){let indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB;let open=indexedDB.open("Restaurants",2);let restaurantList=[];open.onupgradeneeded=function(){let db=open.result;let store=db.createObjectStore("RestaurantStore",{keyPath:"id"});db.createObjectStore("OfflineReviews",{keyPath:"id",autoIncrement:true});let allReviews=db.createObjectStore("AllReviews",{keyPath:"id"});allReviews.createIndex("restaurant_id","restaurant_id",{unique:false});let changedFav=db.createObjectStore("ChangedFavs",{keyPath:"id",autoIncrement:true});var customerObjectStore;console.log("idb upgrade needed");fetch(DBHelper.DATABASE_URL).then(function(response){return response.json()}).then(function(restaurants){store.transaction.oncomplete=function(){customerObjectStore=db.transaction("RestaurantStore","readwrite").objectStore("RestaurantStore");restaurants.forEach(function(customer){customerObjectStore.add(customer)})}}).catch(function(){const error=`Request failed.`;callback(error,null)})};open.onsuccess=function(){var db=open.result;var tx=db.transaction("RestaurantStore","readwrite");var or=db.transaction("OfflineReviews","readwrite");var store=tx.objectStore("RestaurantStore");var offlineReviews=or.objectStore("OfflineReviews");console.log("idb success");offlineReviews.openCursor().onsuccess=function(event){var cursor=event.target.result;if(cursor){postReview(true,cursor.value);cursor.continue()}else{callback(null,restaurantList);console.log("list",restaurantList);console.log("Entries all displayed.");offlineReviews.clear()}};store.openCursor().onsuccess=function(event){var cursor=event.target.result;if(cursor){restaurantList.push(cursor.value);cursor.continue()}else{callback(null,restaurantList);console.log("list",restaurantList);console.log("Entries all displayed.")}};tx.oncomplete=function(){db.close()}}}static fetchRestaurantById(id,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const restaurant=restaurants.find(r=>r.id==id);if(restaurant){callback(null,restaurant)}else{callback("Restaurant does not exist",null)}}})}static fetchRestaurantByCuisine(cuisine,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results)}})}static fetchRestaurantByNeighborhood(neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results)}})}static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{let results=restaurants;if(cuisine!="all"){results=results.filter(r=>r.cuisine_type==cuisine)}if(neighborhood!="all"){results=results.filter(r=>r.neighborhood==neighborhood)}callback(null,results)}})}static fetchNeighborhoods(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood);const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods)}})}static fetchCuisines(callback){DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null)}else{const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type);const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines)}})}static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`}static imageUrlForRestaurant(restaurant){const img=`/img/min/${restaurant.photograph}.webp`;return img}static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker}}
let restaurant;var map;window.initMap=()=>{fetchRestaurantFromURL((error,restaurant)=>{if(error){console.error(error)}else{self.map=new google.maps.Map(document.getElementById('map'),{zoom:16,center:restaurant.latlng,scrollwheel:false});fillBreadcrumb();DBHelper.mapMarkerForRestaurant(self.restaurant,self.map)}})};fetchRestaurantFromURL=callback=>{if(self.restaurant){callback(null,self.restaurant);return}const id=getParameterByName('id');if(!id){error='No restaurant id in URL';callback(error,null)}else{DBHelper.fetchRestaurantById(id,(error,restaurant)=>{self.restaurant=restaurant;if(!restaurant){console.error(error);return}fillRestaurantHTML();callback(null,restaurant)})}};fillRestaurantHTML=(restaurant=self.restaurant)=>{const restaurantContainer=document.getElementById('restaurant-container');const addID=document.getElementById('review-form');addID.setAttribute('data-res-id',restaurant.id);const restaurantContainerContent=document.createElement('div');restaurantContainerContent.setAttribute('class','restaurant-content');const restaurantContainerInfo=document.createElement('div');restaurantContainerInfo.setAttribute('id','restaurant-info');const restaurantHeading=document.createElement('h1');restaurantHeading.setAttribute('id','restaurant-name');restaurantHeading.className='restaurant-name';restaurantHeading.innerHTML=restaurant.name;const restaurantStar=document.createElement('div');let favoriteChoice;if(restaurant.is_favorite=='true'){favoriteChoice='favorite favorited'}else{favoriteChoice='favorite'}restaurantStar.innerHTML='<button class="'+favoriteChoice+'" onclick="favoriteItem('+restaurant.id+')" id="favorite-this-'+restaurant.id+'"><svg class="icon icon-star"><use xlink:href="#icon-star"></use><span>Favorite</span></svg></button>';const restaurantAddress=document.createElement('p');restaurantAddress.setAttribute('id','restaurant-address');restaurantAddress.className='restaurant-address';restaurantAddress.innerHTML=restaurant.address;const restaurantImageContainer=document.createElement('div');restaurantImageContainer.setAttribute('class','restaurant-image-container');const restaurantImage=document.createElement('img');restaurantImage.setAttribute('id','restaurant-img');restaurantImage.className='restaurant-img';restaurantImage.setAttribute('alt','Picture of '+restaurant.name);const imgPath=DBHelper.imageUrlForRestaurant(restaurant);const minImg=imgPath.replace('img/','img/min/');const webpImg=minImg.replace('.jpg','.webp');restaurantImage.setAttribute('srcset',webpImg+' 300w,'+imgPath+' 600w');restaurantImage.setAttribute('sizes','(max-width: 850px) 300px');restaurantImage.src=imgPath;const restaurantCuisine=document.createElement('p');restaurantCuisine.setAttribute('id','restaurant-cuisine');restaurantCuisine.className='restaurant-cuisine';restaurantCuisine.innerHTML=restaurant.cuisine_type;restaurantImageContainer.append(restaurantImage);restaurantImageContainer.append(restaurantCuisine);restaurantImageContainer.append(restaurantAddress);restaurantContainerContent.append(restaurantImageContainer);restaurantContainerContent.append(restaurantContainerInfo);restaurantContainer.append(restaurantHeading);restaurantContainer.append(restaurantStar);restaurantContainer.append(restaurantContainerContent);if(restaurant.operating_hours){fillRestaurantHoursHTML()}fetchReviews()};favoriteItem=restaurant=>{let restaurantId=restaurant.id;let thisbutton=document.getElementById('favorite-this-'+restaurant);if(thisbutton.classList.contains('favorited')){thisbutton.classList.remove('favorited');fetch('http://localhost:1337/restaurants/'+restaurant+'/?is_favorite=false',{method:'put'}).then(function(response){return response.json()}).then(function(restaurants){}).catch(function(error){});let open=indexedDB.open('Restaurants',2);open.onsuccess=function(){let db=open.result;const transaction=db.transaction('RestaurantStore','readwrite');const objectStore=transaction.objectStore('RestaurantStore');objectStore.openCursor().onsuccess=function(event){const cursor=event.target.result;if(cursor){if(cursor.value.restaurant_id===restaurantId){const updateData=cursor.value;updateData.is_favorite='false';const request=cursor.update(updateData);request.onsuccess=function(){console.log('A better album year?')}};cursor.continue()}else{console.log('Entries displayed.')}}}}else{thisbutton.classList.add('favorited');fetch('http://localhost:1337/restaurants/'+restaurant+'/?is_favorite=true',{method:'put'}).then(function(response){return response.json()}).then(function(reviews){}).catch(function(error){});let open=indexedDB.open('Restaurants',2);open.onsuccess=function(){let db=open.result;const transaction=db.transaction('RestaurantStore','readwrite');const objectStore=transaction.objectStore('RestaurantStore');objectStore.openCursor().onsuccess=function(event){const cursor=event.target.result;if(cursor){if(cursor.value.restaurant_id===restaurantId){const updateData=cursor.value;updateData.is_favorite='true';const request=cursor.update(updateData);request.onsuccess=function(){console.log('A better album year?')}};cursor.continue()}else{console.log('Entries displayed.')}}}}};createReviewSchemaAverage=(review,reviewCount)=>{let reviewsAverage=0;review.forEach((review,index)=>{reviewsAverage+=review.rating});const avg=reviewsAverage/reviewCount;return Math.round(avg*10)/10;;};fillRestaurantHoursHTML=(operatingHours=self.restaurant.operating_hours)=>{const restaurantContainer=document.getElementById('restaurant-info');const hoursTitle=document.createElement('h2');const restaurantHoursTable=document.createElement('table');restaurantHoursTable.setAttribute('id','restaurant-hours');hoursTitle.innerHTML='Hours';restaurantHoursTable.appendChild(hoursTitle);for(let key in operatingHours){const row=document.createElement('tr');const day=document.createElement('td');day.innerHTML=key;row.appendChild(day);const time=document.createElement('td');time.innerHTML=operatingHours[key];row.appendChild(time);restaurantHoursTable.appendChild(row)}restaurantContainer.append(restaurantHoursTable)};fetchReviews=(restaurant=self.restaurant)=>{let restaurantReview;fetch('http://localhost:1337/reviews/?restaurant_id='+restaurant.id).then(function(response){return response.json()}).then(function(reviews){restaurantReview=reviews;let indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB;let open=indexedDB.open('Restaurants',2);open.onsuccess=function(event){var db=event.target.result;reviews.forEach(function(review){db.transaction('AllReviews','readwrite').objectStore('AllReviews').add(review)})};fillReviewsHTML(restaurantReview)}).catch(function(){let indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB;let open=indexedDB.open('Restaurants',2);open.onsuccess=function(event){var db=event.target.result;var ar=db.transaction('AllReviews','readwrite').objectStore('AllReviews');let request=ar.getAll();request.onsuccess=function(items){finalRequest=items.target.result;fillReviewsHTML(finalRequest)}}})};fillReviewsHTML=reviews=>{const container=document.getElementById('reviews-container');console.log('reviews: '+reviews);if(!reviews){const noReviews=document.createElement('p');noReviews.innerHTML='No reviews yet!';container.appendChild(noReviews);return}const ul=document.getElementById('reviews-list');while(ul.firstChild){ul.removeChild(ul.firstChild)}reviews.forEach(reviews=>{ul.appendChild(createReviewHTML(reviews))})};postReview=(isOffline,data)=>{const reviewRating=document.getElementById('review-rating').value;const reviewName=document.getElementById('review-name').value;const reviewText=document.getElementById('review-message').value;const reviewForm=document.getElementById('review-form');const reviewID=reviewForm.getAttribute('data-res-id');let postOpts;if(isOffline){postOpts=data}else{postOpts={'restaurant_id':Number(reviewID),'name':reviewName,'rating':Number(reviewRating),'comments':reviewText}}fetch('http://localhost:1337/reviews/',{method:'post',body:JSON.stringify(postOpts)}).then(function(response){return response.json()}).then(function(){fetchReviews();reviewForm.innerHTML='Your review has been submitted!'}).catch(function(){console.log('errir');if(!isOffline){console.log('new Review');let indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB;let open=indexedDB.open('Restaurants',2);open.onsuccess=function(event){var db=event.target.result;var tx=db.transaction('OfflineReviews','readwrite');var offlineReviews=tx.objectStore('OfflineReviews');var reviewObjectStore;offlineReviews.add(postOpts);tx.transaction.oncomplete=function(){reviewObjectStore=db.transaction('OfflineReviews','readwrite').objectStore('OfflineReviews');reviewObjectStore.add(postOpts)}}}reviewForm.innerHTML='Oh no! It appears you are offline. Don\'t worry, we\'ve saved this review. Next time you come to the site we\'ll post it for you!'});;};createReviewHTML=review=>{const li=document.createElement('li');const header=document.createElement('div');header.className='rating-header';const name=document.createElement('h3');name.innerHTML=review.name;header.appendChild(name);const date=document.createElement('time');var finalDate=new Date(review.createdAt);date.innerHTML=finalDate.toLocaleDateString('en-US');header.appendChild(date);li.appendChild(header);const rating=document.createElement('p');rating.className=`rating rating-${review.rating}`;rating.innerHTML=`Rating: ${review.rating} out of 5`;li.appendChild(rating);const comments=document.createElement('p');comments.innerHTML=review.comments;li.appendChild(comments);return li};fillBreadcrumb=(restaurant=self.restaurant)=>{const breadcrumb=document.getElementById('breadcrumb');const li=document.createElement('li');li.innerHTML=restaurant.name;breadcrumb.appendChild(li)};getParameterByName=(name,url)=>{if(!url)url=window.location.href;name=name.replace(/[\[\]]/g,'\\$&');const regex=new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),results=regex.exec(url);if(!results)return null;if(!results[2])return'';return decodeURIComponent(results[2].replace(/\+/g,' '))};