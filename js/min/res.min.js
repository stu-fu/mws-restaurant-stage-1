if('serviceWorker'in navigator){window.addEventListener('load',function(){navigator.serviceWorker.register('service-worker.js').then(function(registration){// Registration was successful
console.log('ServiceWorker registration successful with scope: ',registration.scope);},function(err){// registration failed :(
console.log('ServiceWorker registration failed: ',err);});});}
/**
 * Common database helper functions.
 */class DBHelper{/**
	 * Database URL.
	 * Change this to restaurants.json file location on your server.
	 */static get DATABASE_URL(){const port=1337;// Change this to your server port
return`http://localhost:${port}/restaurants`;}/**
	 * Fetch all restaurants.
	 */static fetchRestaurants(callback){// This works on all devices/browsers, and uses IndexedDBShim as a final fallback
let indexedDB=window.indexedDB||window.mozIndexedDB||window.webkitIndexedDB||window.msIndexedDB||window.shimIndexedDB;let open=indexedDB.open("Restaurants",1);let restaurantList=[];// Create the schema
open.onupgradeneeded=function(){let db=open.result;let store=db.createObjectStore("RestaurantStore",{keyPath:"id"});var customerObjectStore;console.log('idb upgrade needed');fetch(DBHelper.DATABASE_URL).then(function(response){return response.json();}).then(function(restaurants){callback(null,restaurants);store.transaction.oncomplete=function(){customerObjectStore=db.transaction("RestaurantStore","readwrite").objectStore("RestaurantStore");restaurants.forEach(function(customer){customerObjectStore.add(customer);});};}).catch(function(){const error=`Request failed.`;callback(error,null);});};open.onsuccess=function(){// Start a new transaction
var db=open.result;var tx=db.transaction("RestaurantStore","readwrite");var store=tx.objectStore("RestaurantStore");console.log('idb success');store.openCursor().onsuccess=function(event){var cursor=event.target.result;if(cursor){restaurantList.push(cursor.value);cursor.continue();}else{callback(null,restaurantList);console.log('list',restaurantList);console.log('Entries all displayed.');}};// Close the db when the transaction is done
tx.oncomplete=function(){db.close();};};}/**
	 * Fetch a restaurant by its ID.
	 */static fetchRestaurantById(id,callback){// fetch all restaurants with proper error handling.
DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{const restaurant=restaurants.find(r=>r.id==id);if(restaurant){// Got the restaurant
callback(null,restaurant);}else{// Restaurant does not exist in the database
callback('Restaurant does not exist',null);}}});}/**
	 * Fetch restaurants by a cuisine type with proper error handling.
	 */static fetchRestaurantByCuisine(cuisine,callback){// Fetch all restaurants  with proper error handling
DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{// Filter restaurants to have only given cuisine type
const results=restaurants.filter(r=>r.cuisine_type==cuisine);callback(null,results);}});}/**
	 * Fetch restaurants by a neighborhood with proper error handling.
	 */static fetchRestaurantByNeighborhood(neighborhood,callback){// Fetch all restaurants
DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{// Filter restaurants to have only given neighborhood
const results=restaurants.filter(r=>r.neighborhood==neighborhood);callback(null,results);}});}/**
	 * Fetch restaurants by a cuisine and a neighborhood with proper error handling.
	 */static fetchRestaurantByCuisineAndNeighborhood(cuisine,neighborhood,callback){// Fetch all restaurants
DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{let results=restaurants;if(cuisine!='all'){// filter by cuisine
results=results.filter(r=>r.cuisine_type==cuisine);}if(neighborhood!='all'){// filter by neighborhood
results=results.filter(r=>r.neighborhood==neighborhood);}callback(null,results);}});}/**
	 * Fetch all neighborhoods with proper error handling.
	 */static fetchNeighborhoods(callback){// Fetch all restaurants
DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{// Get all neighborhoods from all restaurants
const neighborhoods=restaurants.map((v,i)=>restaurants[i].neighborhood);// Remove duplicates from neighborhoods
const uniqueNeighborhoods=neighborhoods.filter((v,i)=>neighborhoods.indexOf(v)==i);callback(null,uniqueNeighborhoods);}});}/**
	 * Fetch all cuisines with proper error handling.
	 */static fetchCuisines(callback){// Fetch all restaurants
DBHelper.fetchRestaurants((error,restaurants)=>{if(error){callback(error,null);}else{// Get all cuisines from all restaurants
const cuisines=restaurants.map((v,i)=>restaurants[i].cuisine_type);// Remove duplicates from cuisines
const uniqueCuisines=cuisines.filter((v,i)=>cuisines.indexOf(v)==i);callback(null,uniqueCuisines);}});}/**
	 * Restaurant page URL.
	 */static urlForRestaurant(restaurant){return`./restaurant.html?id=${restaurant.id}`;}/**
	 * Restaurant image URL.
	 */static imageUrlForRestaurant(restaurant){const img=`/img/min/${restaurant.photograph}.webp`;return img;}/**
	 * Map marker for a restaurant.
	 */static mapMarkerForRestaurant(restaurant,map){const marker=new google.maps.Marker({position:restaurant.latlng,title:restaurant.name,url:DBHelper.urlForRestaurant(restaurant),map:map,animation:google.maps.Animation.DROP});return marker;}}
let restaurant;var map;/**
 * Initialize Google map, called from HTML.
 */window.initMap=()=>{fetchRestaurantFromURL((error,restaurant)=>{if(error){// Got an error!
console.error(error);}else{self.map=new google.maps.Map(document.getElementById('map'),{zoom:16,center:restaurant.latlng,scrollwheel:false});fillBreadcrumb();DBHelper.mapMarkerForRestaurant(self.restaurant,self.map);}});};/**
 * Get current restaurant from page URL.
 */fetchRestaurantFromURL=callback=>{if(self.restaurant){// restaurant already fetched!
callback(null,self.restaurant);return;}const id=getParameterByName('id');if(!id){// no id found in URL
error='No restaurant id in URL';callback(error,null);}else{DBHelper.fetchRestaurantById(id,(error,restaurant)=>{self.restaurant=restaurant;if(!restaurant){console.error(error);return;}fillRestaurantHTML();callback(null,restaurant);});}};/**
 * Create restaurant HTML and add it to the webpage
 */fillRestaurantHTML=(restaurant=self.restaurant)=>{const restaurantContainer=document.getElementById('restaurant-container');const restaurantContainerContent=document.createElement('div');restaurantContainerContent.setAttribute('class','restaurant-content');const restaurantContainerInfo=document.createElement('div');restaurantContainerInfo.setAttribute('id','restaurant-info');const restaurantHeading=document.createElement('h1');restaurantHeading.setAttribute('id','restaurant-name');restaurantHeading.className='restaurant-name';restaurantHeading.innerHTML=restaurant.name;const restaurantAddress=document.createElement('p');restaurantAddress.setAttribute('id','restaurant-address');restaurantAddress.className='restaurant-address';restaurantAddress.innerHTML=restaurant.address;const restaurantImageContainer=document.createElement('div');restaurantImageContainer.setAttribute('class','restaurant-image-container');const restaurantImage=document.createElement('img');restaurantImage.setAttribute('id','restaurant-img');restaurantImage.className='restaurant-img';restaurantImage.setAttribute('alt','Picture of '+restaurant.name);const imgPath=DBHelper.imageUrlForRestaurant(restaurant);const minImg=imgPath.replace('img/','img/min/');const webpImg=minImg.replace('.jpg','.webp');restaurantImage.setAttribute('srcset',webpImg+' 300w,'+imgPath+' 600w');restaurantImage.setAttribute('sizes','(max-width: 850px) 300px');restaurantImage.src=imgPath;const restaurantCuisine=document.createElement('p');restaurantCuisine.setAttribute('id','restaurant-cuisine');restaurantCuisine.className='restaurant-cuisine';restaurantCuisine.innerHTML=restaurant.cuisine_type;restaurantImageContainer.append(restaurantImage);restaurantImageContainer.append(restaurantCuisine);restaurantImageContainer.append(restaurantAddress);restaurantContainerContent.append(restaurantImageContainer);restaurantContainerContent.append(restaurantContainerInfo);restaurantContainer.append(restaurantHeading);restaurantContainer.append(restaurantContainerContent);// fill operating hours
if(restaurant.operating_hours){fillRestaurantHoursHTML();}// fill reviews
fillReviewsHTML();fillRestaurantSchema();};/**
 * Get review averages for Schema
 */createReviewSchemaAverage=(review,reviewCount)=>{let reviewsAverage=0;review.forEach((review,index)=>{reviewsAverage+=review.rating;});const avg=reviewsAverage/reviewCount;return Math.round(avg*10)/10;;};/**
 * Create JSON-LD text for each review
 */createReviewSchema=(review,reviewCount)=>{const ul=document.getElementById('reviews-list');let reviewsItems=``;review.forEach((review,index)=>{let hasComma=',';if(index==reviewCount-1){hasComma='';}reviewsItems+=`
			{
				"@type": "Review",
				"author": "${review.name}",
				"datePublished": "${review.date}",
				"reviewBody": "${review.comments}",
				"name": "${review.name}: ${review.rating} out of 5",
				"reviewRating": {
					"@type": "Rating",
					"bestRating": "5",
					"ratingValue": "${review.rating}",
					"worstRating": "1"
				}
			}${hasComma}
			`;});return reviewsItems;};/**
 * Create JSON-ld for entire restaurant
 */fillRestaurantSchema=(restaurant=self.restaurant)=>{const container=document.getElementById('restaurant-container');const schemaScript=document.createElement('script');schemaScript.setAttribute('type','application/ld+json');const reviews=restaurant.reviews;const reviewCount=reviews.length;let reviewText=``;let reviewSchemaItem=``;if(reviews){reviewText=`,
		"review": [
			${createReviewSchema(restaurant.reviews,reviewCount)}
		]
		`;}schemaScript.innerHTML=`{
		"@context": "http://schema.org",
		"@type": "Service",
		"aggregateRating": {
			"@type": "AggregateRating",
			"ratingValue": "${createReviewSchemaAverage(restaurant.reviews,reviewCount)}",
			"reviewCount": "${reviewCount}"
		},
		"description": "${restaurant.cuisine_type} in ${restaurant.neighborhood}",
		"name": "${restaurant.name}",
		"image": "${DBHelper.imageUrlForRestaurant(restaurant)}"${reviewText}
	}`;container.appendChild(schemaScript);};/**
 * Create restaurant operating hours HTML table and add it to the webpage.
 */fillRestaurantHoursHTML=(operatingHours=self.restaurant.operating_hours)=>{const restaurantContainer=document.getElementById('restaurant-info');const hoursTitle=document.createElement('h2');const restaurantHoursTable=document.createElement('table');restaurantHoursTable.setAttribute('id','restaurant-hours');hoursTitle.innerHTML='Hours';restaurantHoursTable.appendChild(hoursTitle);for(let key in operatingHours){const row=document.createElement('tr');const day=document.createElement('td');day.innerHTML=key;row.appendChild(day);const time=document.createElement('td');time.innerHTML=operatingHours[key];row.appendChild(time);restaurantHoursTable.appendChild(row);}restaurantContainer.append(restaurantHoursTable);};/**
 * Create all reviews HTML and add them to the webpage.
 */fillReviewsHTML=(reviews=self.restaurant.reviews)=>{const container=document.getElementById('reviews-container');if(!reviews){const noReviews=document.createElement('p');noReviews.innerHTML='No reviews yet!';container.appendChild(noReviews);return;}const ul=document.getElementById('reviews-list');reviews.forEach(review=>{ul.appendChild(createReviewHTML(review));});container.appendChild(ul);};/**
 * Create review HTML and add it to the webpage.
 */createReviewHTML=review=>{const li=document.createElement('li');const header=document.createElement('div');header.className='rating-header';const name=document.createElement('h3');name.innerHTML=review.name;header.appendChild(name);const date=document.createElement('time');date.innerHTML=review.date;header.appendChild(date);li.appendChild(header);const rating=document.createElement('p');rating.className=`rating rating-${review.rating}`;rating.innerHTML=`Rating: ${review.rating} out of 5`;li.appendChild(rating);const comments=document.createElement('p');comments.innerHTML=review.comments;li.appendChild(comments);return li;};/**
 * Add restaurant name to the breadcrumb navigation menu
 */fillBreadcrumb=(restaurant=self.restaurant)=>{const breadcrumb=document.getElementById('breadcrumb');const li=document.createElement('li');li.innerHTML=restaurant.name;breadcrumb.appendChild(li);};/**
 * Get a parameter by name from page URL.
 */getParameterByName=(name,url)=>{if(!url)url=window.location.href;name=name.replace(/[\[\]]/g,'\\$&');const regex=new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),results=regex.exec(url);if(!results)return null;if(!results[2])return'';return decodeURIComponent(results[2].replace(/\+/g,' '));};